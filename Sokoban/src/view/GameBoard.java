/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import Controlers.FileReader;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import model.Board;
import model.Level;

/**
 *
 * @author Alexandre
 */
public class GameBoard extends JFrame {

    private FileReader a = new FileReader();
    private static final int DEFAULT_WIDTH = 480;
    private static final int DEFAULT_HEIGHT = (DEFAULT_WIDTH / 12) * 9;
    private static final int SCALE = 2;
    private int changer = 1;

    Level level;
    private Board boardLevel;
    private final ArrayList<Level> allLevels;

    /**
     * Creates new form GamePanel
     * @param level
     * @param allLevels
     */
    public GameBoard(Level level, ArrayList<Level> allLevels) {
        this.allLevels = allLevels;
        this.level = level;
        this.setPreferredSize(new Dimension(DEFAULT_WIDTH * SCALE, DEFAULT_HEIGHT * SCALE));
        this.setMinimumSize(new Dimension(DEFAULT_WIDTH * SCALE, DEFAULT_HEIGHT * SCALE));
        this.setMaximumSize(new Dimension(DEFAULT_WIDTH * SCALE, DEFAULT_HEIGHT * SCALE));
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        boardLevel = new Board(level);
        initComponents();
        board.setWorld(boardLevel.gameResetState);
        board.setGameStatesToNull(boardLevel.gameResetState);
        buttonStateFloater();
        resetBtn.setFocusable(false);
        saveBtn.setFocusable(false);
        undoBtn.setFocusable(false);
        redoBtn.setFocusable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel = new javax.swing.JPanel();
        resetBtn = new javax.swing.JButton();
        undoBtn = new javax.swing.JButton();
        saveBtn = new javax.swing.JButton();
        redoBtn = new javax.swing.JButton();
        board = boardLevel;

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setType(java.awt.Window.Type.POPUP);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        resetBtn.setText("Reset");
        resetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBtnActionPerformed(evt);
            }
        });

        undoBtn.setText("Undo");
        undoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoBtnActionPerformed(evt);
            }
        });

        saveBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/save.png"))); // NOI18N
        saveBtn.setText("Save");
        saveBtn.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        redoBtn.setText("Redo");
        redoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelLayout = new javax.swing.GroupLayout(jPanel);
        jPanel.setLayout(jPanelLayout);
        jPanelLayout.setHorizontalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLayout.createSequentialGroup()
                .addComponent(resetBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(undoBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(redoBtn)
                .addGap(26, 26, 26)
                .addComponent(saveBtn)
                .addContainerGap(106, Short.MAX_VALUE))
        );
        jPanelLayout.setVerticalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLayout.createSequentialGroup()
                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resetBtn)
                    .addComponent(undoBtn)
                    .addComponent(saveBtn)
                    .addComponent(redoBtn))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel, java.awt.BorderLayout.NORTH);

        board.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                boardMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                boardMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout boardLayout = new javax.swing.GroupLayout(board);
        board.setLayout(boardLayout);
        boardLayout.setHorizontalGroup(
            boardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        boardLayout.setVerticalGroup(
            boardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 259, Short.MAX_VALUE)
        );

        getContentPane().add(board, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        if (board.isComplete() && evt.getKeyCode() != 27) {
            Object[] options = {"Sim!", "Não."};
            if(level.getLevelId()+1 <= allLevels.size()){
                int choice = JOptionPane.showOptionDialog(this, "Pretende seguir para o proximo nível?", "Ganhou!!!", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[1]);
                if (choice == 0) {  
                    boardLevel = new Board(allLevels.get(level.getLevelId()));
                    this.level = allLevels.get(level.getLevelId());
                    board.setWorld(boardLevel.gameResetState);
                    board.setGameStatesToNull(boardLevel.gameResetState);
                    buttonStateFloater();
                    this.repaint();
                    this.revalidate();
                    this.repaint();
                    this.repaint();
                }
            }else{          
                int choice = JOptionPane.showOptionDialog(this, "Parabéns, chegou ao fim do jogo, pretende voltar ao menu inicial?", "Ganhou!!!", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[1]);
                if (choice == 0) {
                    this.dispose();
                }   
            }
        } else if (!board.isComplete()) {
            switch (evt.getKeyCode()) {
                case 37:  
                    board.moveLeft(board.players.get(0));
                    board.players.get(0).setImage("PlayerSprites/1_Left" + changer);
                    board.setGameStates(board.toString());
                    break;
                case 39:
                    board.moveRight(board.players.get(0));
                    board.players.get(0).setImage("PlayerSprites/1_Right" + changer);
                    board.setGameStates(board.toString());
                    break;
                case 38:
                    board.moveUp(board.players.get(0));
                    board.players.get(0).setImage("PlayerSprites/1_Up" + changer);
                    board.setGameStates(board.toString());
                    break;
                case 40:
                    board.moveDown(board.players.get(0));
                    board.players.get(0).setImage("PlayerSprites/1_Down" + changer);
                    board.setGameStates(board.toString());
                    break;
                case 65:
                    if (board.players.size() > 1) {
                        board.moveLeft(board.players.get(1));
                        board.players.get(1).setImage("PlayerSprites/2_Left" + changer);
                        board.setGameStates(board.toString());
                    } else {
                        board.moveLeft(board.players.get(0));
                        board.players.get(0).setImage("PlayerSprites/1_Left" + changer);
                        board.setGameStates(board.toString());
                    }
                    break;
                case 68:
                    if (board.players.size() > 1) {
                        board.moveRight(board.players.get(1));
                        board.players.get(1).setImage("PlayerSprites/2_Right" + changer);
                        board.setGameStates(board.toString());
                    } else {
                        board.moveRight(board.players.get(0));
                        board.players.get(0).setImage("PlayerSprites/1_Right" + changer);
                        board.setGameStates(board.toString());
                    }
                    break;
                case 87:
                    if (board.players.size() > 1) {
                        board.moveUp(board.players.get(1));
                        board.players.get(1).setImage("PlayerSprites/2_Up" + changer);
                        board.setGameStates(board.toString());
                    } else {
                        board.moveUp(board.players.get(0));
                        board.players.get(0).setImage("PlayerSprites/1_Up" + changer);
                        board.setGameStates(board.toString());
                    }
                    break;
                case 83:
                    if (board.players.size() > 1) {
                        board.moveDown(board.players.get(1));
                        board.players.get(1).setImage("PlayerSprites/2_Down" + changer);
                        board.setGameStates(board.toString());
                    } else {
                        board.moveDown(board.players.get(0));
                        board.players.get(0).setImage("PlayerSprites/1_Down" + changer);
                        board.setGameStates(board.toString());
                    }
                    break;
                case 27:
                    board.setWorld(boardLevel.gameResetState);
                    board.setGameStatesToNull(boardLevel.gameResetState);
                    buttonStateFloater();
                    this.repaint();
                    break;
                default:
                    break;
            }
            if (changer == 1) {
                changer = 2;
            } else {
                changer = 1;
            }
            if (board.getUndoRedoFalse()) {
                board.setGameStatesToNull(board.toString());
                board.setUndoRedoFalse();
            }
            buttonStateFloater();
            board.repaint();
        }
    }//GEN-LAST:event_formKeyPressed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        switch (evt.getKeyCode()) {
            case 37:
                board.players.get(0).setImage("PlayerSprites/1_Left");
                break;
            case 39:
                board.players.get(0).setImage("PlayerSprites/1_Right");
                break;
            case 38:
                board.players.get(0).setImage("PlayerSprites/1_Up");
                break;
            case 40:
                board.players.get(0).setImage("PlayerSprites/1_Down");
                break;
            case 65:
                if (board.players.size() > 1) {
                    board.players.get(1).setImage("PlayerSprites/2_Left");
                } else {
                    board.players.get(0).setImage("PlayerSprites/1_Left");
                }
                break;
            case 68:
                if (board.players.size() > 1) {
                    board.players.get(1).setImage("PlayerSprites/2_Right");
                } else {
                    board.players.get(0).setImage("PlayerSprites/1_Right");
                }
                break;
            case 87:
                if (board.players.size() > 1) {
                    board.players.get(1).setImage("PlayerSprites/2_Up");
                } else {
                    board.players.get(0).setImage("PlayerSprites/1_up");
                }
                break;
            case 83:
                if (board.players.size() > 1) {
                    board.players.get(1).setImage("PlayerSprites/2_Down");
                } else {
                    board.players.get(0).setImage("PlayerSprites/1_Down");
                }
                break;
        }
        board.repaint();
    }//GEN-LAST:event_formKeyReleased

    private void boardMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boardMouseReleased
        int h = this.getHeight() / 3 + ((this.getHeight() / 3) / 2);
        int w = this.getWidth() / 3 + ((this.getWidth() / 3) / 2);
        if (evt.getX() >= (w - (w / 3)) && evt.getX() <= (w + (w / 3))) {
            if (evt.getY() >= (this.getHeight() / 2)) {
                board.players.get(0).setImage("PlayerSprites/1_Down");

            } else {
                board.players.get(0).setImage("PlayerSprites/1_Up");
            }
        } else if (evt.getY() >= (h - (h / 3)) && evt.getY() <= (h + (h / 3))) {
            if (evt.getX() >= (this.getWidth() / 2)) {
                board.players.get(0).setImage("PlayerSprites/1_Right");
            } else {
                board.players.get(0).setImage("PlayerSprites/1_Left");
            }
        }
        board.repaint();
    }//GEN-LAST:event_boardMouseReleased

    private void boardMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boardMousePressed
        if (board.isComplete()) {
            Object[] options = {"Sim!", "Não."};
            int choice = JOptionPane.showOptionDialog(this, "Tem a certeza que deseja voltar ao menu inicial?", "Ganhou!!!", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[1]);

            if (choice == 0) {
                this.dispose();
            }
        } else {
            int h = this.getHeight() / 3 + ((this.getHeight() / 3) / 2);
            int w = this.getWidth() / 3 + ((this.getWidth() / 3) / 2);

            if (evt.getX() >= (w - (w / 3)) && evt.getX() <= (w + (w / 3))) {
                if (evt.getY() >= (this.getHeight() / 2)) {
                    board.moveDown(board.players.get(0));
                    board.players.get(0).setImage("PlayerSprites/1_Down" + changer);
                    board.setGameStates(board.toString());

                } else {
                    board.moveUp(board.players.get(0));
                    board.players.get(0).setImage("PlayerSprites/1_Up" + changer);
                    board.setGameStates(board.toString());
                }
            } else if (evt.getY() >= (h - (h / 3)) && evt.getY() <= (h + (h / 3))) {
                if (evt.getX() >= (this.getWidth() / 2)) {
                    board.moveRight(board.players.get(0));
                    board.players.get(0).setImage("PlayerSprites/1_Right" + changer);
                    board.setGameStates(board.toString());
                } else {
                    board.moveLeft(board.players.get(0));
                    board.players.get(0).setImage("PlayerSprites/1_Left" + changer);
                    board.setGameStates(board.toString());
                }
            }

            if (changer == 1) {
                changer = 2;
            } else {
                changer = 1;
            }
            if (board.getUndoRedoFalse()) {
                board.setGameStatesToNull(board.toString());
                board.setUndoRedoFalse();
            }
            buttonStateFloater();
            board.repaint();
        }
    }//GEN-LAST:event_boardMousePressed

    private void redoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoBtnActionPerformed
        board.setWorld(board.getGameStatesRedo());
        buttonStateFloater();
        this.repaint();
    }//GEN-LAST:event_redoBtnActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        try {
            a.SaveLevelState(board.toString(), board.getLvlNum());
            JOptionPane.showMessageDialog(this, "O ficheiro foi guardado com sucesso", "Guardado!", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Erro ao guardar o seu ficheiro. \n\n" + ex.getMessage(), "Erro!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_saveBtnActionPerformed

    private void undoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoBtnActionPerformed
        board.setWorld(board.getGameStatesUndo());
        buttonStateFloater();
        this.repaint();
    }//GEN-LAST:event_undoBtnActionPerformed

    private void resetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetBtnActionPerformed
        board.setWorld(boardLevel.gameResetState);
        board.setGameStatesToNull(boardLevel.gameResetState);
        buttonStateFloater();
        this.repaint();
    }//GEN-LAST:event_resetBtnActionPerformed

    private void buttonStateFloater() {
        int a = board.getGameStatesSize();
        int b = board.getGameStateIter() + 1;
        if (a == 1 || board.getGameStateIter() == 0) {
            undoBtn.setEnabled(false);
        } else {
            undoBtn.setEnabled(true);
        }
        if (a == b) {
            redoBtn.setEnabled(false);
        } else {
            redoBtn.setEnabled(true);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private model.Board board;
    private javax.swing.JPanel jPanel;
    private javax.swing.JButton redoBtn;
    private javax.swing.JButton resetBtn;
    private javax.swing.JButton saveBtn;
    private javax.swing.JButton undoBtn;
    // End of variables declaration//GEN-END:variables
}
