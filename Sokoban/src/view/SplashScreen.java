/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import Controlers.FileReader;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import model.Level;

/**
 *
 * @author 0101220
 */
public class SplashScreen extends JFrame {

    static FileReader a = new FileReader();
    static ArrayList<Level> LevelsSinglePlayer = new ArrayList();
    static ArrayList<Level> LevelsMultiPlayer = new ArrayList();
    private static final int DEFAULT_WIDTH = 480;
    private static final int DEFAULT_HEIGHT = (DEFAULT_WIDTH / 12) * 9;
    private static final int SCALE = 2;

    /**
     * Creates new form SplashScreen
     */
    public SplashScreen() {
        this.setUndecorated(true);
        this.setPreferredSize(new Dimension(DEFAULT_WIDTH * SCALE, DEFAULT_HEIGHT * SCALE));
        this.setMinimumSize(new Dimension(DEFAULT_WIDTH * SCALE, DEFAULT_HEIGHT * SCALE));
        this.setMaximumSize(new Dimension(DEFAULT_WIDTH * SCALE, DEFAULT_HEIGHT * SCALE));
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        initComponents();
        LevelsSinglePlayer = a.GetAllLevels("single");  
        LevelsMultiPlayer = a.GetAllLevels("multi");  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        main = new javax.swing.JPanel();
        buttonGroup = new javax.swing.JPanel();
        newBtn = new javax.swing.JButton();
        loadBtn = new javax.swing.JButton();
        exitBtn = new javax.swing.JButton();
        aboutBtn = new javax.swing.JButton();
        newBtn1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        buttonGroup.setMaximumSize(new java.awt.Dimension(320, 240));
        buttonGroup.setMinimumSize(new java.awt.Dimension(320, 240));
        buttonGroup.setPreferredSize(new java.awt.Dimension(320, 240));

        newBtn.setText("New Game Singleplayer");
        newBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        newBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        newBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        newBtn.setMaximumSize(new java.awt.Dimension(50, 19));
        newBtn.setMinimumSize(new java.awt.Dimension(50, 19));
        newBtn.setPreferredSize(new java.awt.Dimension(50, 19));
        newBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newBtnActionPerformed(evt);
            }
        });

        loadBtn.setText("Load Game");
        loadBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        loadBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        loadBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        loadBtn.setMaximumSize(new java.awt.Dimension(57, 30));
        loadBtn.setMinimumSize(new java.awt.Dimension(57, 30));
        loadBtn.setPreferredSize(new java.awt.Dimension(50, 19));
        loadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadBtnActionPerformed(evt);
            }
        });

        exitBtn.setText("Exit Game");
        exitBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        exitBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exitBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });

        aboutBtn.setText("About");
        aboutBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        aboutBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        aboutBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        aboutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutBtnActionPerformed(evt);
            }
        });

        newBtn1.setText("New Game Multiplayer");
        newBtn1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        newBtn1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        newBtn1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        newBtn1.setMaximumSize(new java.awt.Dimension(50, 19));
        newBtn1.setMinimumSize(new java.awt.Dimension(50, 19));
        newBtn1.setPreferredSize(new java.awt.Dimension(50, 19));
        newBtn1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newBtn1MouseClicked(evt);
            }
        });
        newBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newBtn1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonGroupLayout = new javax.swing.GroupLayout(buttonGroup);
        buttonGroup.setLayout(buttonGroupLayout);
        buttonGroupLayout.setHorizontalGroup(
            buttonGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonGroupLayout.createSequentialGroup()
                .addContainerGap(81, Short.MAX_VALUE)
                .addGroup(buttonGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(newBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                    .addComponent(loadBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(exitBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(aboutBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(newBtn1, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE))
                .addContainerGap(80, Short.MAX_VALUE))
        );
        buttonGroupLayout.setVerticalGroup(
            buttonGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonGroupLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(newBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(newBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(loadBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(aboutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(exitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout mainLayout = new javax.swing.GroupLayout(main);
        main.setLayout(mainLayout);
        mainLayout.setHorizontalGroup(
            mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainLayout.createSequentialGroup()
                .addGap(320, 320, 320)
                .addComponent(buttonGroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(320, Short.MAX_VALUE))
        );
        mainLayout.setVerticalGroup(
            mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainLayout.createSequentialGroup()
                .addGap(180, 180, 180)
                .addComponent(buttonGroup, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(169, Short.MAX_VALUE))
        );

        getContentPane().add(main, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newBtnActionPerformed
       List<Object> options = new ArrayList<>();

        for (Level l : LevelsSinglePlayer) {
            options.add(l.getLevelId());
        };
        int option = JOptionPane.showOptionDialog(this, "Qual Nivel quer escolher?", "Escolha um nÃ­vel", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options.toArray(), options.get(0));

        if (option > -1) {
            GameBoard game = new GameBoard(LevelsSinglePlayer.get(option), LevelsSinglePlayer);
            Runnable runner = () -> {
                /* Create and display the form */
                game.setVisible(true);
            };

            EventQueue.invokeLater(runner);
        }
    }//GEN-LAST:event_newBtnActionPerformed

    private void aboutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutBtnActionPerformed
                Runnable runner = () -> {
                    /* Create and display the form */
                    new AboutScreen().setVisible(true);
                };
                EventQueue.invokeLater(runner);
    }//GEN-LAST:event_aboutBtnActionPerformed

    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitBtnActionPerformed

    private void loadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadBtnActionPerformed
        try {
            GameBoard game;
            if (a.GetSavedLevel() == null) {
                Object[] options = {"OK"};
                int n = JOptionPane.showOptionDialog(this,
                        "Your save file was not found.", "File Not Found",
                        JOptionPane.PLAIN_MESSAGE,
                        JOptionPane.QUESTION_MESSAGE,
                        null,
                        options,
                        options[0]);
            } else {
                if (a.GetSavedLevel().getLevelLayout().contains("Â£")) {
                    game = new GameBoard(a.GetSavedLevel(), LevelsMultiPlayer);
                } else {
                    game = new GameBoard(a.GetSavedLevel(), LevelsSinglePlayer);
                }
                Runnable runner = () -> {
                    /* Create and display the form */
                    game.setVisible(true);
                };
                EventQueue.invokeLater(runner);
            }
        } catch (Exception ex) {
            Logger.getLogger(SplashScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_loadBtnActionPerformed

    private void newBtn1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newBtn1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_newBtn1MouseClicked

    private void newBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newBtn1ActionPerformed
        List<Object> options = new ArrayList<>();

        for (Level l : LevelsMultiPlayer) {
            options.add(l.getLevelId());
        };
        int option = JOptionPane.showOptionDialog(this, "Qual Nivel quer escolher?", "Escolha um nÃ­vel", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options.toArray(), options.get(0));

        if (option > -1) {
            GameBoard game = new GameBoard(LevelsMultiPlayer.get(option), LevelsMultiPlayer);
            Runnable runner = () -> {
                /* Create and display the form */
                game.setVisible(true);
            };

            EventQueue.invokeLater(runner);
        }
    }//GEN-LAST:event_newBtn1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aboutBtn;
    private javax.swing.JPanel buttonGroup;
    private javax.swing.JButton exitBtn;
    private javax.swing.JButton loadBtn;
    private javax.swing.JPanel main;
    private javax.swing.JButton newBtn;
    private javax.swing.JButton newBtn1;
    // End of variables declaration//GEN-END:variables
}
